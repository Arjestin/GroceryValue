//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GroceryValue.Client.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Chain", Namespace="http://schemas.datacontract.org/2004/07/GroceryValue.Library")]
    [System.SerializableAttribute()]
    public partial class Chain : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ChainIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ChainId {
            get {
                return this.ChainIdField;
            }
            set {
                if ((this.ChainIdField.Equals(value) != true)) {
                    this.ChainIdField = value;
                    this.RaisePropertyChanged("ChainId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Store", Namespace="http://schemas.datacontract.org/2004/07/GroceryValue.Library")]
    [System.SerializableAttribute()]
    public partial class Store : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long StoreIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long StoreId {
            get {
                return this.StoreIdField;
            }
            set {
                if ((this.StoreIdField.Equals(value) != true)) {
                    this.StoreIdField = value;
                    this.RaisePropertyChanged("StoreId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Item", Namespace="http://schemas.datacontract.org/2004/07/GroceryValue.Library")]
    [System.SerializableAttribute()]
    public partial class Item : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Grocery", Namespace="http://schemas.datacontract.org/2004/07/GroceryValue.Library")]
    [System.SerializableAttribute()]
    public partial class Grocery : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long GroceryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GroceryId {
            get {
                return this.GroceryIdField;
            }
            set {
                if ((this.GroceryIdField.Equals(value) != true)) {
                    this.GroceryIdField = value;
                    this.RaisePropertyChanged("GroceryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChains", ReplyAction="http://tempuri.org/IService/GetChainsResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Chain> GetChains();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChains", ReplyAction="http://tempuri.org/IService/GetChainsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Chain>> GetChainsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortedChains", ReplyAction="http://tempuri.org/IService/GetSortedChainsResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Chain> GetSortedChains();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortedChains", ReplyAction="http://tempuri.org/IService/GetSortedChainsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Chain>> GetSortedChainsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStores", ReplyAction="http://tempuri.org/IService/GetStoresResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Store> GetStores(long chainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStores", ReplyAction="http://tempuri.org/IService/GetStoresResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Store>> GetStoresAsync(long chainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortedStores", ReplyAction="http://tempuri.org/IService/GetSortedStoresResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Store> GetSortedStores(long chainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortedStores", ReplyAction="http://tempuri.org/IService/GetSortedStoresResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Store>> GetSortedStoresAsync(long chainId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetItems", ReplyAction="http://tempuri.org/IService/GetItemsResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item> GetItems(long storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetItems", ReplyAction="http://tempuri.org/IService/GetItemsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item>> GetItemsAsync(long storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortedItems", ReplyAction="http://tempuri.org/IService/GetSortedItemsResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item> GetSortedItems(long storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortedItems", ReplyAction="http://tempuri.org/IService/GetSortedItemsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item>> GetSortedItemsAsync(long storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGroceries", ReplyAction="http://tempuri.org/IService/GetGroceriesResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Grocery> GetGroceries(System.Collections.Generic.List<long> storeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetGroceries", ReplyAction="http://tempuri.org/IService/GetGroceriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Grocery>> GetGroceriesAsync(System.Collections.Generic.List<long> storeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortedGroceries", ReplyAction="http://tempuri.org/IService/GetSortedGroceriesResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Grocery> GetSortedGroceries(System.Collections.Generic.List<long> storeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSortedGroceries", ReplyAction="http://tempuri.org/IService/GetSortedGroceriesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Grocery>> GetSortedGroceriesAsync(System.Collections.Generic.List<long> storeIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPriceLists", ReplyAction="http://tempuri.org/IService/GetPriceListsResponse")]
        System.Collections.Generic.List<System.Collections.Generic.List<float>> GetPriceLists(System.Collections.Generic.List<long> storeIds, System.Collections.Generic.List<long> groceryIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPriceLists", ReplyAction="http://tempuri.org/IService/GetPriceListsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<float>>> GetPriceListsAsync(System.Collections.Generic.List<long> storeIds, System.Collections.Generic.List<long> groceryIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMostExpensiveItems", ReplyAction="http://tempuri.org/IService/GetMostExpensiveItemsResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item> GetMostExpensiveItems(long storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMostExpensiveItems", ReplyAction="http://tempuri.org/IService/GetMostExpensiveItemsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item>> GetMostExpensiveItemsAsync(long storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMostInexpensiveItems", ReplyAction="http://tempuri.org/IService/GetMostInexpensiveItemsResponse")]
        System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item> GetMostInexpensiveItems(long storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMostInexpensiveItems", ReplyAction="http://tempuri.org/IService/GetMostInexpensiveItemsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item>> GetMostInexpensiveItemsAsync(long storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoadItemsToDatabase", ReplyAction="http://tempuri.org/IService/LoadItemsToDatabaseResponse")]
        bool LoadItemsToDatabase(long storeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoadItemsToDatabase", ReplyAction="http://tempuri.org/IService/LoadItemsToDatabaseResponse")]
        System.Threading.Tasks.Task<bool> LoadItemsToDatabaseAsync(long storeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : GroceryValue.Client.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<GroceryValue.Client.ServiceReference.IService>, GroceryValue.Client.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Chain> GetChains() {
            return base.Channel.GetChains();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Chain>> GetChainsAsync() {
            return base.Channel.GetChainsAsync();
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Chain> GetSortedChains() {
            return base.Channel.GetSortedChains();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Chain>> GetSortedChainsAsync() {
            return base.Channel.GetSortedChainsAsync();
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Store> GetStores(long chainId) {
            return base.Channel.GetStores(chainId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Store>> GetStoresAsync(long chainId) {
            return base.Channel.GetStoresAsync(chainId);
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Store> GetSortedStores(long chainId) {
            return base.Channel.GetSortedStores(chainId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Store>> GetSortedStoresAsync(long chainId) {
            return base.Channel.GetSortedStoresAsync(chainId);
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item> GetItems(long storeId) {
            return base.Channel.GetItems(storeId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item>> GetItemsAsync(long storeId) {
            return base.Channel.GetItemsAsync(storeId);
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item> GetSortedItems(long storeId) {
            return base.Channel.GetSortedItems(storeId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item>> GetSortedItemsAsync(long storeId) {
            return base.Channel.GetSortedItemsAsync(storeId);
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Grocery> GetGroceries(System.Collections.Generic.List<long> storeIds) {
            return base.Channel.GetGroceries(storeIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Grocery>> GetGroceriesAsync(System.Collections.Generic.List<long> storeIds) {
            return base.Channel.GetGroceriesAsync(storeIds);
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Grocery> GetSortedGroceries(System.Collections.Generic.List<long> storeIds) {
            return base.Channel.GetSortedGroceries(storeIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Grocery>> GetSortedGroceriesAsync(System.Collections.Generic.List<long> storeIds) {
            return base.Channel.GetSortedGroceriesAsync(storeIds);
        }
        
        public System.Collections.Generic.List<System.Collections.Generic.List<float>> GetPriceLists(System.Collections.Generic.List<long> storeIds, System.Collections.Generic.List<long> groceryIds) {
            return base.Channel.GetPriceLists(storeIds, groceryIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.List<float>>> GetPriceListsAsync(System.Collections.Generic.List<long> storeIds, System.Collections.Generic.List<long> groceryIds) {
            return base.Channel.GetPriceListsAsync(storeIds, groceryIds);
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item> GetMostExpensiveItems(long storeId) {
            return base.Channel.GetMostExpensiveItems(storeId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item>> GetMostExpensiveItemsAsync(long storeId) {
            return base.Channel.GetMostExpensiveItemsAsync(storeId);
        }
        
        public System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item> GetMostInexpensiveItems(long storeId) {
            return base.Channel.GetMostInexpensiveItems(storeId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GroceryValue.Client.ServiceReference.Item>> GetMostInexpensiveItemsAsync(long storeId) {
            return base.Channel.GetMostInexpensiveItemsAsync(storeId);
        }
        
        public bool LoadItemsToDatabase(long storeId) {
            return base.Channel.LoadItemsToDatabase(storeId);
        }
        
        public System.Threading.Tasks.Task<bool> LoadItemsToDatabaseAsync(long storeId) {
            return base.Channel.LoadItemsToDatabaseAsync(storeId);
        }
    }
}
